import requests
from bs4 import BeautifulSoup
import json
from datetime import datetime

id_list = [
    (1, 189, "一般女生組100公尺自由式 預賽"),(2, 149, "一般男生組50公尺蛙式 預賽"),(3, 111, "一般女生組50公尺背式 預賽"),(4, , ""),
    (5, 209, "一般女生組100公尺蝶式 預賽"),(6, 169, "一般男生組100公尺蝶式 預賽"),(7, , ""),(8, , ""),(9, 195, "一般女生組50公尺蛙式 預賽"),(10, , ""),
    (11, , ""),(12, , ""),(13, 205, "一般女生組200公尺仰式 預賽"),(14, , ""),(15, , ""),
    (16, , ""),(17, 219, "一般女生組4*200公尺自由式接力 預賽"),(18, , ""),(19, , ""),(20, 188, "一般女生組400公尺自由式 快組計時決賽"),
    (21, , ""),(22, , ""),(23, , ""),(24, 208, "一般女生組100公尺蝶式 決賽"),(25, 168, "一般男生組100公尺蝶式 決賽"),
    (26, , ""),(27, , ""),(28, 194, "一般女生組50公尺蛙式 決賽"),(29, , ""),(30, , ""),
    (31, , ""),(32, 204, "一般女生組200公尺仰式 決賽"),(33, , ""),(34, , ""),(35, , ""),
    (36, 218, "一般女生組4*200公尺自由式接力 決賽"),(37, , ""),(38, , ""),(39, 191, "一般女生組800公尺自由式 慢組計時決賽"),(40, , ""),
    (41, 213, "一般女生組200公尺混合式 預賽"),(42, , ""),(43, , ""),(44, , ""),(45, 185, "一般女生組100公尺自由式 預賽"),
    (46, 145, "一般男生組100公尺自由式 預賽"),(47, , ""),(48, , ""),(49, 201, "一般女生組50公尺仰式 預賽"),(50, , ""),
    (51, , ""),(52, , ""),(53, , ""),(54, , ""),(55, 223, "一般混合組男女4*100公尺自由式接力 預賽"),
    (56, 190, "一般女生組800公尺自由式 快組計時決賽"),(57, , ""),(58, 212, "一般女生組200公尺混合式 決賽"),(59, , ""),(60, , ""),
    (61, , ""),(62, 184, "一般女生組100公尺自由式 決賽"),(63, 144, "一般男生組100公尺自由式 決賽"),(64, , ""),(65, , ""),
    (66, 200, "一般女生組50公尺仰式 決賽"),(67, , ""),(68, , ""),(69, , ""),(70, , ""),
    (71, , ""),(72, 222, "一般混合組男女4*100公尺自由式接力 決賽"),(73, , ""),(74, , ""),(75, 211, "一般女生組200公尺蝶式 預賽"),
    (76, , ""),(77, , ""),(78, , ""),(79, 203, "一般女生組游泳 100公尺仰式 預賽"),(80, 163, "一般男生組100公尺仰式 預賽"),
    (81, , ""),(82, , ""),(83, 197, "一般女生組100公尺蛙式 預賽"),(84, 157, "一般男生組100公尺蛙式 預賽"),(85, , ""),
    (86, , ""),(87, 217, "一般女生組4*100公尺自由式接力 預賽"),(88, , ""),(89, , ""),(90, , ""),
    (91, , ""),(92, , ""),(93, 210, "一般女生組200公尺蝶式 決賽"),(94, , ""),(95, , ""),
    (96, , ""),(97, 202, "一般女生組游泳 100公尺仰式 決賽"),(98, 162, "一般男生組100公尺仰式 決賽"),(99, , ""),(100, , ""),
    (101, 196, "一般女生組100公尺蛙式 決賽"),(102, 156, "一般男生組100公尺蛙式 決賽"),(103, , ""),(104, , ""),(105, 216, "一般女生組4*100公尺自由式接力 決賽"),
    (106, , ""),(107, , ""),(108, , ""),(109, 193, "一般女生組1500公尺自由式 慢組計時決賽"),(110, 153, "一般男生組1500公尺自由式 慢組計時決賽"),
    (111, 199, "一般女生組200公尺蛙式 預賽"),(112, , ""),(113, , ""),(114, , ""),(115, 183, "一般女生組50公尺自由式 預賽"),
    (116, , ""),(117, , ""),(118, , ""),(119, , ""),(120, , ""),
    (121, 187, "一般女生組200公尺自由式 預賽"),(122, , ""),(123, , ""),(124, , ""),(125, 221, "一般女生組4*100公尺混合式接力 預賽"),
    (126, , ""),(127, , ""),(128, 192, "一般女生組1500公尺自由式 快組計時決賽"),(129, 152, "一般男生組1500公尺自由式 快組計時決賽"),(130, 198, "一般女生組200公尺蛙式 決賽"),
    (131, , ""),(132, , ""),(133, , ""),(134, 182, "一般女生組50公尺自由式 決賽"),(135, , ""),
    (136, , ""),(137, , ""),(138, , ""),(139, , ""),(140, 186, "一般女生組200公尺自由式 決賽"),
    (141, , ""),(142, , ""),(143, , ""),(144, 220, "一般女生組4*100公尺混合式接力 決賽"),(145, , ""),
    (146, , ""),(147, , ""),(148, , ""),(149, 207, "一般女生組50公尺蝶式 預賽"),(150, , ""),
    (151, , ""),(152, , ""),(153, 215, "一般女生組400公尺混合式 慢組計時決賽"),(154, , ""),(155, , ""),
    (156, , ""),(157, 225, "一般混合組男女4*100公尺混合式接力 預賽"),(158, , ""),(159, , ""),(160, 206, "一般女生組50公尺蝶式 決賽"),
    (161, , ""),(162, , ""),(163, , ""),(164, 214, "一般女生組400公尺混合式 快組計時決賽"),(165, , ""),
    (166, , ""),(167, , ""),(168, 224, "一般混合組男女4*100公尺混合式接力 決賽"),(169, , ""),(170, , ""),
    (171, , ""),(172, , ""),(173, , ""),(174, , ""),(175, , ""),
    (176, , ""),(177, , ""),(178, , ""),(179, , ""),(180, , ""),
    (181, , ""),(182, , ""),(183, , ""),(184, , ""),(185, , ""),
    (186, , ""),(187, , ""),(188, , ""),(189, , ""),(190, , ""),
    (191, , ""),(192, , ""),(193, , ""),(194, , ""),(195, , ""),
    (196, , ""),(197, , ""),(198, , ""),(199, , ""),(200, , ""),
    (201, , ""),(202, , ""),(203, , ""),(204, , ""),(205, , ""),
    (206, , ""),(207, , ""),(208, , ""),(209, , ""),(210, , ""),
    (211, , ""),(212, , ""),(213, 669, "一般女生組400公尺自由式 決賽"),(214, 670, "一般女生組800公尺自由式 決賽"),(215, 671, "一般女生組1500公尺自由式 決賽"),
    (216, 672, "一般女生組400公尺混合式 決賽"),
]

def fetch_score(id_):
    url = f"https://114niag.cjcu.edu.tw/Public/Race/Report_Score.aspx?id={id_}"
    print(f"Fetching {url}")
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36"
        }
        res = requests.get(url, headers=headers, timeout=10, verify=False)  # <--- 這裡加 verify=False
        print(f"Status Code: {res.status_code}")
        res.raise_for_status()
    except requests.RequestException as e:
        print(f"Request error: {e}")
        return None

    soup = BeautifulSoup(res.text, 'html.parser')
    table = soup.find('table', id='table1')
    if not table:
        print("No table found.")
        return None

    rows = []
    for tr in table.find_all('tr'):
        cols = [td.get_text(strip=True) for td in tr.find_all(['td', 'th'])]
        if cols:
            rows.append(cols)

    if len(rows) < 2:
        print("Table has no data rows.")
        return None

    headers = rows[0]
    data_rows = rows[1:]

    records = []
    for row in data_rows:
        if len(row) >= len(headers):
            record = dict(zip(headers, row))
            records.append(record)

    return records

def main():
    result = []
    for order, id_, title in id_list:
        scores = fetch_score(id_)
        if scores:
            result.append({
                "order": order,
                "id": id_,
                "title": title,
                "timestamp": datetime.now().isoformat(),
                "scores": scores
            })

    with open('data/score.json', 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)

if __name__ == "__main__":
    main()
